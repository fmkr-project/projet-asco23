type token =
  | DCONST of (int)
  | VARNAME of (string)
  | BCONST of (string)
  | OCONST of (string)
  | HCONST of (string)
  | EXP of (string)
  | REF
  | MUT
  | NEG
  | NOT
  | ASTK
  | PLUS
  | MINUS
  | DIV
  | MOD
  | LAND
  | LOR
  | LXOR
  | SLLI
  | SLRI
  | EQ
  | NEQ
  | LT
  | LEQT
  | GT
  | GEQT
  | BWAND
  | BWOR
  | COMMENT
  | FORCEIDENT
  | AS
  | LBLSPEC
  | CONTINUE
  | BREAK
  | WHILE
  | LOOP
  | IF
  | ELSE
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | SCOLON
  | COMMA
  | OFTYPE
  | GIVES
  | TAG
  | TPT
  | NEWLINE
  | END
  | FN
  | TRUE
  | FALSE
  | ABSTRACT
  | ASYNC
  | AWAIT
  | BECOME
  | BOX
  | CONST
  | CRATE
  | DO
  | DYN
  | ENUM
  | EXTERN
  | FINAL
  | FOR
  | IMPL
  | IN
  | MACRO
  | MATCH
  | MOVE
  | OVERRIDE
  | PRIV
  | PUB
  | SELF
  | SSELF
  | STATIC
  | SUPER
  | TRAIT
  | TYPE
  | TYPEOF
  | UNSAFE
  | UNSIZED
  | USE
  | VIRTUAL
  | WHERE
  | YIELD
  | USETYPE of (string)
  | LET
  | RETURN

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
    open Ast
  
# 99 "parser.ml"
let yytransl_const = [|
  263 (* REF *);
  264 (* MUT *);
  265 (* NEG *);
  266 (* NOT *);
  267 (* ASTK *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* DIV *);
  271 (* MOD *);
  272 (* LAND *);
  273 (* LOR *);
  274 (* LXOR *);
  275 (* SLLI *);
  276 (* SLRI *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQT *);
  281 (* GT *);
  282 (* GEQT *);
  283 (* BWAND *);
  284 (* BWOR *);
  285 (* COMMENT *);
  286 (* FORCEIDENT *);
  287 (* AS *);
  288 (* LBLSPEC *);
  289 (* CONTINUE *);
  290 (* BREAK *);
  291 (* WHILE *);
  292 (* LOOP *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* LPAREN *);
  296 (* RPAREN *);
  297 (* LBRACE *);
  298 (* RBRACE *);
  299 (* SCOLON *);
  300 (* COMMA *);
  301 (* OFTYPE *);
  302 (* GIVES *);
  303 (* TAG *);
  304 (* TPT *);
  305 (* NEWLINE *);
  306 (* END *);
  307 (* FN *);
  308 (* TRUE *);
  309 (* FALSE *);
  310 (* ABSTRACT *);
  311 (* ASYNC *);
  312 (* AWAIT *);
  313 (* BECOME *);
  314 (* BOX *);
  315 (* CONST *);
  316 (* CRATE *);
  317 (* DO *);
  318 (* DYN *);
  319 (* ENUM *);
  320 (* EXTERN *);
  321 (* FINAL *);
  322 (* FOR *);
  323 (* IMPL *);
  324 (* IN *);
  325 (* MACRO *);
  326 (* MATCH *);
  327 (* MOVE *);
  328 (* OVERRIDE *);
  329 (* PRIV *);
  330 (* PUB *);
  331 (* SELF *);
  332 (* SSELF *);
  333 (* STATIC *);
  334 (* SUPER *);
  335 (* TRAIT *);
  336 (* TYPE *);
  337 (* TYPEOF *);
  338 (* UNSAFE *);
  339 (* UNSIZED *);
  340 (* USE *);
  341 (* VIRTUAL *);
  342 (* WHERE *);
  343 (* YIELD *);
  345 (* LET *);
  346 (* RETURN *);
    0|]

let yytransl_block = [|
  257 (* DCONST *);
  258 (* VARNAME *);
  259 (* BCONST *);
  260 (* OCONST *);
  261 (* HCONST *);
  262 (* EXP *);
  344 (* USETYPE *);
    0|]

let yylhs = "\255\255\
\003\000\004\000\004\000\005\000\009\000\006\000\006\000\006\000\
\006\000\010\000\008\000\003\000\003\000\003\000\003\000\013\000\
\013\000\002\000\002\000\002\000\002\000\015\000\015\000\011\000\
\011\000\007\000\007\000\012\000\012\000\016\000\016\000\001\000\
\001\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\018\000\018\000\019\000\019\000\017\000\017\000\017\000\
\017\000\020\000\020\000\021\000\021\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\007\000\002\000\000\000\002\000\001\000\
\003\000\003\000\003\000\000\000\001\000\002\000\001\000\001\000\
\002\000\001\000\002\000\005\000\001\000\000\000\002\000\001\000\
\002\000\000\000\002\000\003\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\003\000\004\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\002\000\000\000\002\000\000\000\003\000\002\000\003\000\004\000\
\001\000\003\000\005\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\065\000\
\019\000\021\000\017\000\001\000\003\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\067\000\064\000\000\000\061\000\069\000\000\000\025\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\062\000\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\000\000\000\000\
\027\000\000\000\000\000\037\000\000\000\000\000\072\000\011\000\
\076\000\077\000\075\000\000\000\020\000\028\000\009\000\010\000\
\000\000\004\000"

let yydgoto = "\002\000\
\019\000\020\000\021\000\022\000\023\000\112\000\089\000\080\000\
\000\000\113\000\114\000\111\000\024\000\040\000\048\000\026\000\
\027\000\037\000\028\000\029\000\131\000"

let yysindex = "\007\000\
\003\255\000\000\000\000\000\000\061\255\061\255\061\255\061\255\
\061\255\230\254\230\254\018\255\061\255\000\000\020\255\021\255\
\007\255\022\255\006\255\003\255\000\000\014\255\019\255\018\255\
\081\002\057\255\000\000\066\255\000\000\081\002\081\002\081\002\
\081\002\057\255\045\255\077\255\000\000\022\255\041\255\081\002\
\201\255\037\255\047\255\000\000\085\255\042\255\018\255\000\000\
\000\000\000\000\000\000\000\000\000\000\019\255\000\000\061\255\
\061\255\061\255\061\255\061\255\061\255\061\255\061\255\061\255\
\061\255\061\255\061\255\061\255\061\255\061\255\061\255\061\255\
\061\255\229\254\007\255\061\255\018\255\041\255\003\255\000\000\
\000\000\000\000\051\255\000\000\000\000\007\255\000\000\229\254\
\022\255\000\000\081\002\045\255\045\255\036\255\036\255\045\255\
\045\255\045\255\045\255\045\255\081\002\081\002\081\002\081\002\
\081\002\081\002\045\255\045\255\229\254\000\000\000\000\059\255\
\067\255\060\255\081\002\041\255\000\000\070\255\253\254\073\255\
\000\000\072\255\076\255\000\000\007\255\229\254\000\000\000\000\
\000\000\000\000\000\000\042\255\000\000\000\000\000\000\000\000\
\041\255\000\000"

let yyrindex = "\000\000\
\032\001\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\081\000\081\000\068\255\000\000\000\000\000\000\000\000\
\000\000\147\000\000\000\028\001\000\000\000\000\001\000\030\001\
\003\000\000\000\000\000\000\000\000\000\033\000\045\000\073\000\
\106\000\000\000\243\000\000\000\000\000\147\000\000\000\139\000\
\000\000\000\000\000\000\000\000\000\000\237\254\068\255\000\000\
\000\000\000\000\000\000\000\000\000\000\069\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\255\000\000\068\255\000\000\055\255\000\000\
\000\000\000\000\114\000\000\000\000\000\078\255\000\000\000\000\
\074\255\000\000\169\000\019\001\070\001\179\000\211\000\110\001\
\143\001\176\001\208\001\240\001\173\000\201\000\205\000\233\000\
\237\000\010\001\016\002\048\002\000\000\000\000\000\000\000\000\
\080\255\000\000\015\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\255\000\000\000\000\000\000\
\000\000\000\000\000\000\082\255\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\006\000\000\000\031\000\250\255\012\000\036\000\248\255\217\255\
\000\000\002\000\109\000\174\255\108\000\124\000\225\255\126\000\
\000\000\125\000\000\000\016\000\000\000"

let yytablesize = 888
let yytable = "\083\000\
\021\000\026\000\015\000\003\000\004\000\121\000\082\000\001\000\
\044\000\005\000\006\000\109\000\007\000\008\000\045\000\009\000\
\053\000\039\000\003\000\004\000\036\000\042\000\043\000\026\000\
\005\000\006\000\123\000\007\000\008\000\055\000\009\000\050\000\
\038\000\012\000\054\000\010\000\011\000\079\000\117\000\012\000\
\035\000\013\000\047\000\136\000\039\000\014\000\056\000\053\000\
\049\000\015\000\010\000\011\000\090\000\016\000\012\000\056\000\
\013\000\122\000\059\000\060\000\110\000\003\000\004\000\052\000\
\015\000\054\000\074\000\005\000\006\000\016\000\007\000\008\000\
\041\000\009\000\075\000\074\000\127\000\076\000\081\000\129\000\
\066\000\079\000\116\000\075\000\085\000\086\000\087\000\088\000\
\119\000\068\000\068\000\017\000\018\000\010\000\011\000\068\000\
\012\000\138\000\124\000\013\000\077\000\078\000\068\000\068\000\
\126\000\042\000\079\000\018\000\068\000\118\000\125\000\128\000\
\132\000\074\000\133\000\134\000\022\000\006\000\002\000\008\000\
\007\000\120\000\026\000\137\000\025\000\046\000\135\000\051\000\
\030\000\031\000\032\000\033\000\035\000\034\000\130\000\038\000\
\041\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\046\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\000\000\000\000\115\000\
\054\000\000\000\025\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\047\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\056\000\000\000\000\000\000\000\057\000\000\000\000\000\075\000\
\084\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
\021\000\058\000\021\000\021\000\000\000\021\000\036\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\013\000\000\000\012\000\
\000\000\021\000\021\000\021\000\021\000\021\000\000\000\021\000\
\000\000\021\000\021\000\021\000\015\000\032\000\000\000\021\000\
\000\000\000\000\002\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\030\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\044\000\000\000\035\000\
\038\000\038\000\038\000\038\000\000\000\000\000\000\000\035\000\
\035\000\035\000\035\000\035\000\039\000\039\000\039\000\039\000\
\000\000\021\000\021\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\048\000\000\000\066\000\
\041\000\041\000\041\000\041\000\000\000\000\000\000\000\066\000\
\066\000\066\000\066\000\066\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\049\000\000\000\
\074\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\074\000\074\000\074\000\074\000\074\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\050\000\
\000\000\022\000\032\000\032\000\032\000\032\000\000\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\051\000\
\045\000\045\000\045\000\045\000\053\000\053\000\053\000\053\000\
\000\000\000\000\046\000\046\000\046\000\046\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\052\000\
\054\000\054\000\054\000\054\000\055\000\055\000\055\000\055\000\
\000\000\000\000\047\000\047\000\047\000\047\000\040\000\040\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\059\000\
\056\000\056\000\056\000\056\000\057\000\057\000\057\000\057\000\
\000\000\000\000\040\000\040\000\040\000\040\000\043\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\060\000\
\000\000\058\000\058\000\058\000\058\000\000\000\036\000\036\000\
\036\000\036\000\043\000\043\000\043\000\043\000\016\000\016\000\
\068\000\068\000\068\000\068\000\016\000\016\000\068\000\013\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\044\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\048\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\000\000\049\000\049\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\000\000\050\000\050\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\050\000\050\000\050\000\051\000\051\000\000\000\000\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\051\000\051\000\051\000\052\000\052\000\000\000\000\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\052\000\052\000\052\000\059\000\059\000\000\000\000\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\059\000\059\000\059\000\060\000\060\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\060\000\060\000\060\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000"

let yycheck = "\039\000\
\000\000\021\001\000\000\001\001\002\001\088\000\038\000\001\000\
\002\001\007\001\008\001\039\001\010\001\011\001\008\001\013\001\
\023\000\012\000\001\001\002\001\047\001\002\001\002\001\043\001\
\007\001\008\001\109\000\010\001\011\001\024\000\013\001\020\000\
\000\000\037\001\023\000\033\001\034\001\041\001\078\000\037\001\
\000\000\039\001\021\001\126\000\000\000\043\001\011\001\054\000\
\043\001\047\001\033\001\034\001\047\000\051\001\037\001\011\001\
\039\001\089\000\014\001\015\001\088\001\001\001\002\001\050\001\
\047\001\054\000\031\001\007\001\008\001\051\001\010\001\011\001\
\000\000\013\001\039\001\031\001\116\000\021\001\002\001\119\000\
\000\000\041\001\077\000\039\001\048\001\039\001\002\001\046\001\
\038\001\035\001\036\001\089\001\090\001\033\001\034\001\041\001\
\042\001\137\000\040\001\039\001\035\001\036\001\035\001\036\001\
\045\001\000\000\041\001\090\001\041\001\079\000\044\001\042\001\
\040\001\000\000\043\001\040\001\043\001\040\001\050\001\040\001\
\040\001\086\000\041\001\132\000\001\000\017\000\125\000\020\000\
\005\000\006\000\007\000\008\000\009\000\008\000\119\000\011\000\
\013\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\090\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\000\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\255\255\255\255\076\000\
\000\000\255\255\079\000\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\000\000\255\255\255\255\255\255\000\000\255\255\255\255\039\001\
\040\001\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\255\255\255\255\007\001\
\008\001\000\000\010\001\011\001\255\255\013\001\000\000\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\255\255\041\001\042\001\043\001\042\001\043\001\255\255\047\001\
\255\255\255\255\050\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\000\000\255\255\031\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\040\001\041\001\042\001\043\001\
\255\255\089\001\090\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\000\000\255\255\031\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\000\000\255\255\
\031\001\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\039\001\040\001\041\001\042\001\043\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\255\255\031\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\040\001\041\001\042\001\043\001\040\001\041\001\042\001\043\001\
\255\255\255\255\040\001\041\001\042\001\043\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\040\001\041\001\042\001\043\001\040\001\041\001\042\001\043\001\
\255\255\255\255\040\001\041\001\042\001\043\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\040\001\041\001\042\001\043\001\040\001\041\001\042\001\043\001\
\255\255\255\255\040\001\041\001\042\001\043\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\255\255\040\001\041\001\042\001\043\001\255\255\040\001\041\001\
\042\001\043\001\040\001\041\001\042\001\043\001\035\001\036\001\
\035\001\036\001\035\001\036\001\041\001\042\001\041\001\042\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\255\255\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\255\255\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001"

let yynames_const = "\
  REF\000\
  MUT\000\
  NEG\000\
  NOT\000\
  ASTK\000\
  PLUS\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LAND\000\
  LOR\000\
  LXOR\000\
  SLLI\000\
  SLRI\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQT\000\
  GT\000\
  GEQT\000\
  BWAND\000\
  BWOR\000\
  COMMENT\000\
  FORCEIDENT\000\
  AS\000\
  LBLSPEC\000\
  CONTINUE\000\
  BREAK\000\
  WHILE\000\
  LOOP\000\
  IF\000\
  ELSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  SCOLON\000\
  COMMA\000\
  OFTYPE\000\
  GIVES\000\
  TAG\000\
  TPT\000\
  NEWLINE\000\
  END\000\
  FN\000\
  TRUE\000\
  FALSE\000\
  ABSTRACT\000\
  ASYNC\000\
  AWAIT\000\
  BECOME\000\
  BOX\000\
  CONST\000\
  CRATE\000\
  DO\000\
  DYN\000\
  ENUM\000\
  EXTERN\000\
  FINAL\000\
  FOR\000\
  IMPL\000\
  IN\000\
  MACRO\000\
  MATCH\000\
  MOVE\000\
  OVERRIDE\000\
  PRIV\000\
  PUB\000\
  SELF\000\
  SSELF\000\
  STATIC\000\
  SUPER\000\
  TRAIT\000\
  TYPE\000\
  TYPEOF\000\
  UNSAFE\000\
  UNSIZED\000\
  USE\000\
  VIRTUAL\000\
  WHERE\000\
  YIELD\000\
  LET\000\
  RETURN\000\
  "

let yynames_block = "\
  DCONST\000\
  VARNAME\000\
  BCONST\000\
  OCONST\000\
  HCONST\000\
  EXP\000\
  USETYPE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fseq) in
    Obj.repr(
# 45 "parser.mly"
            ( _1 )
# 620 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'f) in
    Obj.repr(
# 46 "parser.mly"
        ( _1 )
# 627 "parser.ml"
               : 'fseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'f) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fseq) in
    Obj.repr(
# 47 "parser.mly"
           ( Seq(_1, _2) )
# 635 "parser.ml"
               : 'fseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ps) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'vers) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 50 "parser.mly"
                                      ( Defun(Id(_2), _4, _6, _7) )
# 645 "parser.ml"
               : 'f))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                 ( Tag(_2) )
# 652 "parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                ( Empty )
# 658 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pf) in
    Obj.repr(
# 58 "parser.mly"
             ( _1 )
# 665 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pf) in
    Obj.repr(
# 59 "parser.mly"
       ( _1 )
# 672 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pf) in
    Obj.repr(
# 60 "parser.mly"
                ( Seq(_1, _3) )
# 680 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'p) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 62 "parser.mly"
               ( Oftype(_1, _3) )
# 688 "parser.ml"
               : 'pf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    Obj.repr(
# 64 "parser.mly"
                   ( _2 )
# 695 "parser.ml"
               : 'b))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
               ( Empty )
# 701 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ds) in
    Obj.repr(
# 66 "parser.mly"
       ( _1 )
# 708 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ds) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 67 "parser.mly"
         ( Seq(_1, _2) )
# 716 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 68 "parser.mly"
        ( _1 )
# 723 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 70 "parser.mly"
      ( _1 )
# 730 "parser.ml"
               : 'ds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ds) in
    Obj.repr(
# 71 "parser.mly"
         ( Seq(_1, _2) )
# 738 "parser.ml"
               : 'ds))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
          ( Empty )
# 744 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    Obj.repr(
# 74 "parser.mly"
             ( _1 )
# 751 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'p) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'vers) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'eo) in
    Obj.repr(
# 75 "parser.mly"
                         ( Setf(_2, _3, _4) )
# 760 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'f) in
    Obj.repr(
# 76 "parser.mly"
      ( _1 )
# 767 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                ( Empty )
# 773 "parser.ml"
               : 'eo))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 79 "parser.mly"
         ( _2 )
# 780 "parser.ml"
               : 'eo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
           ( Id(_1) )
# 787 "parser.ml"
               : 'p))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "parser.mly"
                ( Mut(Id(_2)) )
# 794 "parser.ml"
               : 'p))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                  ( Empty )
# 800 "parser.ml"
               : 'vers))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 85 "parser.mly"
            ( _2 )
# 807 "parser.ml"
               : 'vers))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 't) in
    Obj.repr(
# 87 "parser.mly"
                   ( _2 )
# 814 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
            ( Type(_1) )
# 821 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
           ( Id(_1) )
# 828 "parser.ml"
               : 'x))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'x) in
    Obj.repr(
# 91 "parser.mly"
           ( Deref(_2) )
# 835 "parser.ml"
               : 'x))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 93 "parser.mly"
       ( _1 )
# 842 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eb) in
    Obj.repr(
# 94 "parser.mly"
       ( _1 )
# 849 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
            ( ICte(_1) )
# 856 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
            ( Id(_1) )
# 863 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'x) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 99 "parser.mly"
             ( Aff(_1, _3) )
# 871 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ps) in
    Obj.repr(
# 100 "parser.mly"
                         ( Call(_1, _3) )
# 879 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 102 "parser.mly"
            ( Ref(_2) )
# 886 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 103 "parser.mly"
            ( Mut(_2) )
# 893 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 104 "parser.mly"
              ( Neg(_2) )
# 900 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 105 "parser.mly"
            ( Not(_2) )
# 907 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 106 "parser.mly"
             ( Deref(_2) )
# 914 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 108 "parser.mly"
                 ( Add(_1, _3) )
# 922 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 109 "parser.mly"
                  ( Sub(_1, _3) )
# 930 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 110 "parser.mly"
                 ( Mul(_1, _3) )
# 938 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 111 "parser.mly"
                ( Div(_1, _3) )
# 946 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 112 "parser.mly"
                ( Mod(_1, _3) )
# 954 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 113 "parser.mly"
                 ( Land(_1, _3) )
# 962 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 114 "parser.mly"
                ( Lor(_1, _3) )
# 970 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 115 "parser.mly"
                 ( Lxor(_1, _3) )
# 978 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 116 "parser.mly"
                 ( Slli(_1, _3) )
# 986 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 117 "parser.mly"
                 ( Slri(_1, _3) )
# 994 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 118 "parser.mly"
               ( Eq(_1, _3) )
# 1002 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 119 "parser.mly"
                ( Neq(_1, _3) )
# 1010 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 120 "parser.mly"
               ( Lt(_1, _3) )
# 1018 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 121 "parser.mly"
                 ( Leqt(_1, _3) )
# 1026 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 122 "parser.mly"
               ( Gt(_1, _3) )
# 1034 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 123 "parser.mly"
                 ( Geqt(_1, _3) )
# 1042 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 124 "parser.mly"
                  ( Bwand(_1, _3) )
# 1050 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 125 "parser.mly"
                 ( Bwor(_1, _3) )
# 1058 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'esb) in
    Obj.repr(
# 127 "parser.mly"
                      ( Paren(_2) )
# 1065 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'esb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 129 "parser.mly"
             ( Cast(_1, _3) )
# 1073 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lo) in
    Obj.repr(
# 131 "parser.mly"
                ( Continue(_2) )
# 1080 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lo) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'eo) in
    Obj.repr(
# 132 "parser.mly"
                ( Break(_2, _3) )
# 1088 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'eo) in
    Obj.repr(
# 133 "parser.mly"
              ( Return(_2) )
# 1095 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                ( Empty )
# 1101 "parser.ml"
               : 'lo))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "parser.mly"
                ( Tag(_2) )
# 1108 "parser.ml"
               : 'lo))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
                 ( Empty )
# 1114 "parser.ml"
               : 'lob))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 139 "parser.mly"
                    ( Tag(_2) )
# 1121 "parser.ml"
               : 'lob))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lob) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 141 "parser.mly"
          ( Lblk(_1, _2) )
# 1129 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lob) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 142 "parser.mly"
               ( Loop(_1, _3) )
# 1137 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lob) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 143 "parser.mly"
                  ( While(_1, _3, _4) )
# 1146 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifs) in
    Obj.repr(
# 144 "parser.mly"
        ( _1 )
# 1153 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 146 "parser.mly"
            ( If(_2, _3) )
# 1161 "parser.ml"
               : 'ifs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'b) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bif) in
    Obj.repr(
# 147 "parser.mly"
                    ( Ifelse(_2, _3, _5) )
# 1170 "parser.ml"
               : 'ifs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 149 "parser.mly"
       ( _1 )
# 1177 "parser.ml"
               : 'bif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifs) in
    Obj.repr(
# 150 "parser.mly"
        ( _1 )
# 1184 "parser.ml"
               : 'bif))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.ast)
