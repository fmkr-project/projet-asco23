type token =
  | DCONST of (string)
  | VARNAME of (string)
  | BCONST of (string)
  | OCONST of (string)
  | HCONST of (string)
  | EXP of (string)
  | AND
  | MUT
  | NEG
  | NOT
  | ASTK
  | EQ
  | PLUS
  | MINUS
  | DIV
  | MOD
  | LOR
  | LXOR
  | SLLI
  | SLRI
  | DEQ
  | NEQ
  | LT
  | LEQT
  | GT
  | GEQT
  | BWAND
  | BWOR
  | COMMENT
  | FORCEIDENT
  | AS
  | LBLSPEC
  | CONTINUE
  | BREAK
  | WHILE
  | LOOP
  | IF
  | ELSE
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | SCOLON
  | COMMA
  | OFTYPE
  | GIVES
  | DEC
  | TAG of (string)
  | NEWLINE
  | END
  | FN
  | TRUE
  | FALSE
  | ABSTRACT
  | ASYNC
  | AWAIT
  | BECOME
  | BOX
  | CONST
  | CRATE
  | DO
  | DYN
  | ENUM
  | EXTERN
  | FINAL
  | FOR
  | IMPL
  | IN
  | MACRO
  | MATCH
  | MOVE
  | OVERRIDE
  | PRIV
  | PUB
  | REF
  | SELF
  | SSELF
  | STATIC
  | SUPER
  | TRAIT
  | TYPE
  | TYPEOF
  | UNSAFE
  | UNSIZED
  | USE
  | VIRTUAL
  | WHERE
  | YIELD
  | ISUF of (string)
  | USUF of (string)
  | FSUF of (string)
  | BSUF of (string)
  | LET
  | RETURN

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
    open Ast
  
# 103 "parser.ml"
let yytransl_const = [|
  263 (* AND *);
  264 (* MUT *);
  265 (* NEG *);
  266 (* NOT *);
  267 (* ASTK *);
  268 (* EQ *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* DIV *);
  272 (* MOD *);
  273 (* LOR *);
  274 (* LXOR *);
  275 (* SLLI *);
  276 (* SLRI *);
  277 (* DEQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQT *);
  281 (* GT *);
  282 (* GEQT *);
  283 (* BWAND *);
  284 (* BWOR *);
  285 (* COMMENT *);
  286 (* FORCEIDENT *);
  287 (* AS *);
  288 (* LBLSPEC *);
  289 (* CONTINUE *);
  290 (* BREAK *);
  291 (* WHILE *);
  292 (* LOOP *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* LPAREN *);
  296 (* RPAREN *);
  297 (* LBRACE *);
  298 (* RBRACE *);
  299 (* SCOLON *);
  300 (* COMMA *);
  301 (* OFTYPE *);
  302 (* GIVES *);
  303 (* DEC *);
  305 (* NEWLINE *);
  306 (* END *);
  307 (* FN *);
  308 (* TRUE *);
  309 (* FALSE *);
  310 (* ABSTRACT *);
  311 (* ASYNC *);
  312 (* AWAIT *);
  313 (* BECOME *);
  314 (* BOX *);
  315 (* CONST *);
  316 (* CRATE *);
  317 (* DO *);
  318 (* DYN *);
  319 (* ENUM *);
  320 (* EXTERN *);
  321 (* FINAL *);
  322 (* FOR *);
  323 (* IMPL *);
  324 (* IN *);
  325 (* MACRO *);
  326 (* MATCH *);
  327 (* MOVE *);
  328 (* OVERRIDE *);
  329 (* PRIV *);
  330 (* PUB *);
  331 (* REF *);
  332 (* SELF *);
  333 (* SSELF *);
  334 (* STATIC *);
  335 (* SUPER *);
  336 (* TRAIT *);
  337 (* TYPE *);
  338 (* TYPEOF *);
  339 (* UNSAFE *);
  340 (* UNSIZED *);
  341 (* USE *);
  342 (* VIRTUAL *);
  343 (* WHERE *);
  344 (* YIELD *);
  349 (* LET *);
  350 (* RETURN *);
    0|]

let yytransl_block = [|
  257 (* DCONST *);
  258 (* VARNAME *);
  259 (* BCONST *);
  260 (* OCONST *);
  261 (* HCONST *);
  262 (* EXP *);
  304 (* TAG *);
  345 (* ISUF *);
  346 (* USUF *);
  347 (* FSUF *);
  348 (* BSUF *);
    0|]

let yylhs = "\255\255\
\003\000\004\000\004\000\005\000\006\000\006\000\006\000\006\000\
\009\000\008\000\003\000\003\000\003\000\003\000\013\000\013\000\
\002\000\002\000\002\000\002\000\014\000\014\000\015\000\015\000\
\010\000\010\000\007\000\007\000\016\000\016\000\016\000\020\000\
\017\000\017\000\017\000\017\000\018\000\018\000\018\000\018\000\
\018\000\022\000\022\000\021\000\021\000\023\000\019\000\019\000\
\024\000\024\000\025\000\025\000\025\000\011\000\011\000\011\000\
\011\000\011\000\026\000\026\000\027\000\027\000\027\000\027\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\029\000\029\000\030\000\028\000\028\000\031\000\031\000\032\000\
\032\000\032\000\032\000\033\000\033\000\034\000\034\000\001\000\
\001\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\007\000\000\000\002\000\001\000\003\000\
\003\000\003\000\000\000\001\000\002\000\001\000\001\000\002\000\
\001\000\002\000\005\000\001\000\000\000\002\000\000\000\002\000\
\001\000\002\000\000\000\002\000\001\000\001\000\001\000\001\000\
\002\000\002\000\002\000\002\000\002\000\002\000\004\000\003\000\
\005\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\001\000\002\000\
\003\000\002\000\001\000\002\000\000\000\002\000\001\000\003\000\
\001\000\001\000\003\000\004\000\003\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\002\000\
\000\000\001\000\001\000\000\000\001\000\000\000\002\000\002\000\
\003\000\004\000\001\000\003\000\005\000\001\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\099\000\000\000\047\000\048\000\000\000\000\000\000\000\015\000\
\114\000\000\000\000\000\000\000\000\000\065\000\029\000\030\000\
\031\000\000\000\000\000\000\000\000\000\113\000\107\000\049\000\
\050\000\034\000\045\000\035\000\036\000\000\000\000\000\112\000\
\000\000\000\000\000\000\000\000\094\000\101\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\096\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\001\000\003\000\000\000\016\000\
\020\000\000\000\046\000\000\000\037\000\033\000\000\000\000\000\
\103\000\000\000\000\000\000\000\104\000\000\000\095\000\000\000\
\092\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\093\000\051\000\055\000\000\000\000\000\
\000\000\043\000\040\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\056\000\
\058\000\000\000\000\000\068\000\039\000\000\000\106\000\010\000\
\110\000\111\000\109\000\000\000\000\000\000\000\000\000\019\000\
\057\000\054\000\064\000\041\000\000\000\000\000\008\000\009\000\
\028\000\004\000"

let yydgoto = "\002\000\
\023\000\024\000\025\000\026\000\027\000\145\000\174\000\101\000\
\146\000\147\000\132\000\048\000\029\000\109\000\150\000\030\000\
\031\000\032\000\033\000\034\000\042\000\139\000\095\000\133\000\
\134\000\035\000\136\000\053\000\063\000\036\000\037\000\038\000\
\039\000\163\000"

let yysindex = "\045\000\
\118\255\000\000\000\000\000\000\023\255\023\255\023\255\171\255\
\192\255\192\255\192\255\245\254\245\254\192\255\192\255\000\000\
\000\000\046\255\000\000\000\000\039\255\192\255\089\003\000\000\
\000\000\034\255\036\255\000\000\118\255\000\000\000\000\000\000\
\000\000\051\255\102\255\072\255\045\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\192\255\179\003\000\000\
\006\255\179\003\102\255\006\255\000\000\000\000\192\255\120\003\
\149\003\085\255\000\000\125\255\086\255\179\003\000\000\192\255\
\192\255\192\255\192\255\192\255\192\255\192\255\192\255\192\255\
\192\255\192\255\192\255\192\255\192\255\192\255\192\255\192\255\
\192\255\005\255\192\255\000\000\000\000\000\000\036\255\000\000\
\000\000\000\000\000\000\132\255\000\000\000\000\053\255\192\255\
\000\000\192\255\104\255\118\255\000\000\006\255\000\000\108\255\
\000\000\039\255\000\000\005\255\142\255\179\003\179\003\119\255\
\119\255\000\255\000\255\018\004\039\004\149\255\149\255\004\004\
\004\004\004\004\004\004\004\004\004\004\233\003\206\003\012\255\
\016\255\000\000\000\000\000\000\000\000\000\000\055\003\127\255\
\009\255\000\000\000\000\179\003\120\003\000\000\117\255\052\255\
\128\255\139\255\141\255\000\000\192\255\144\255\100\255\000\000\
\000\000\158\255\192\255\000\000\000\000\053\255\000\000\000\000\
\000\000\000\000\000\000\138\255\039\255\005\255\179\003\000\000\
\000\000\000\000\000\000\000\000\005\255\104\255\000\000\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\136\000\000\000\000\000\099\000\139\000\139\000\139\000\112\255\
\112\255\112\255\112\255\177\000\001\000\112\255\112\255\000\000\
\000\000\000\000\000\000\000\000\000\000\071\001\000\000\000\000\
\000\000\000\000\055\000\245\002\032\000\000\000\000\000\000\000\
\000\000\139\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\112\255\006\000\000\000\
\104\001\091\000\000\000\136\001\000\000\000\000\071\001\000\000\
\000\000\000\000\000\000\000\000\011\255\031\001\000\000\112\255\
\112\255\112\255\112\255\112\255\112\255\112\255\112\255\112\255\
\112\255\112\255\112\255\112\255\112\255\112\255\112\255\112\255\
\112\255\000\000\075\255\000\000\000\000\000\000\150\255\000\000\
\000\000\022\003\000\000\215\000\000\000\000\000\253\000\112\255\
\000\000\112\255\000\000\248\254\000\000\168\001\000\000\039\001\
\000\000\161\255\000\000\000\000\164\255\099\001\128\001\026\002\
\068\002\206\001\244\001\197\002\165\002\100\002\133\002\036\000\
\173\001\211\001\249\001\031\002\105\002\202\002\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\169\255\000\000\
\253\000\000\000\000\000\207\002\000\000\000\000\000\000\000\000\
\000\000\173\255\000\000\000\000\112\255\000\000\000\000\000\000\
\000\000\000\000\075\255\000\000\000\000\253\000\000\000\000\000\
\000\000\000\000\000\000\175\255\161\255\000\000\174\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\250\255\185\000\118\000\251\255\248\255\056\000\000\000\200\255\
\000\000\199\000\166\255\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\044\000\133\255\090\000\019\000\
\157\255\218\000\075\000\219\000\178\000\125\000\000\000\000\000\
\092\000\000\000"

let yytablesize = 1358
let yytable = "\104\000\
\100\000\047\000\049\000\050\000\052\000\070\000\064\000\056\000\
\057\000\028\000\065\000\128\000\064\000\157\000\091\000\062\000\
\065\000\148\000\087\000\151\000\089\000\086\000\021\000\043\000\
\043\000\043\000\102\000\102\000\152\000\154\000\082\000\014\000\
\102\000\011\000\172\000\084\000\017\000\090\000\083\000\102\000\
\059\000\091\000\142\000\129\000\083\000\001\000\060\000\058\000\
\062\000\044\000\045\000\169\000\043\000\021\000\020\000\153\000\
\091\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\176\000\135\000\094\000\087\000\098\000\
\099\000\086\000\177\000\085\000\159\000\100\000\018\000\161\000\
\014\000\140\000\073\000\141\000\100\000\040\000\041\000\130\000\
\131\000\092\000\066\000\138\000\040\000\041\000\130\000\131\000\
\040\000\041\000\130\000\131\000\028\000\102\000\102\000\040\000\
\041\000\096\000\061\000\102\000\097\000\178\000\003\000\004\000\
\005\000\006\000\007\000\106\000\008\000\064\000\107\000\009\000\
\010\000\065\000\108\000\011\000\003\000\068\000\069\000\011\000\
\054\000\054\000\044\000\040\000\041\000\093\000\167\000\138\000\
\100\000\144\000\102\000\102\000\135\000\082\000\012\000\013\000\
\102\000\149\000\014\000\064\000\015\000\083\000\160\000\065\000\
\016\000\066\000\067\000\068\000\069\000\017\000\156\000\164\000\
\018\000\019\000\020\000\003\000\004\000\005\000\006\000\007\000\
\100\000\008\000\046\000\082\000\009\000\010\000\165\000\173\000\
\011\000\166\000\168\000\083\000\040\000\041\000\130\000\131\000\
\003\000\004\000\005\000\006\000\007\000\170\000\008\000\002\000\
\005\000\009\000\010\000\012\000\013\000\011\000\023\000\014\000\
\063\000\015\000\021\000\022\000\007\000\088\000\038\000\027\000\
\024\000\143\000\017\000\061\000\175\000\137\000\019\000\020\000\
\012\000\013\000\158\000\051\000\014\000\171\000\015\000\055\000\
\103\000\000\000\000\000\162\000\000\000\000\000\000\000\017\000\
\000\000\000\000\000\000\019\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\100\000\100\000\100\000\100\000\100\000\000\000\100\000\
\022\000\000\000\100\000\100\000\000\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\022\000\098\000\100\000\
\000\000\100\000\100\000\100\000\100\000\100\000\108\000\100\000\
\100\000\100\000\100\000\100\000\100\000\070\000\070\000\070\000\
\070\000\070\000\000\000\000\000\100\000\100\000\000\000\020\000\
\020\000\020\000\020\000\020\000\000\000\020\000\084\000\084\000\
\020\000\020\000\102\000\102\000\020\000\091\000\097\000\000\000\
\102\000\014\000\000\000\084\000\084\000\084\000\084\000\084\000\
\000\000\091\000\091\000\091\000\091\000\091\000\000\000\020\000\
\020\000\020\000\020\000\020\000\000\000\020\000\100\000\020\000\
\020\000\020\000\079\000\000\000\000\000\000\000\020\000\072\000\
\002\000\066\000\020\000\020\000\000\000\066\000\059\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\076\000\
\000\000\066\000\073\000\073\000\073\000\073\000\073\000\071\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\000\000\044\000\000\000\020\000\020\000\044\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\069\000\
\000\000\044\000\102\000\102\000\085\000\000\000\000\000\000\000\
\102\000\044\000\044\000\044\000\044\000\044\000\044\000\100\000\
\000\000\000\000\000\000\100\000\000\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\077\000\000\000\100\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\100\000\
\100\000\100\000\100\000\100\000\100\000\038\000\000\000\000\000\
\000\000\038\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\078\000\000\000\038\000\000\000\000\000\
\087\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\042\000\000\000\000\000\000\000\042\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\074\000\000\000\042\000\000\000\000\000\088\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\108\000\000\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\075\000\000\000\108\000\098\000\098\000\
\098\000\098\000\098\000\000\000\000\000\108\000\108\000\108\000\
\108\000\108\000\108\000\097\000\000\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\082\000\000\000\097\000\000\000\000\000\
\089\000\102\000\102\000\000\000\000\000\000\000\097\000\097\000\
\097\000\097\000\097\000\000\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\083\000\000\000\072\000\000\000\
\000\000\000\000\079\000\079\000\079\000\079\000\079\000\072\000\
\072\000\072\000\072\000\072\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\081\000\000\000\071\000\076\000\
\076\000\076\000\076\000\076\000\000\000\000\000\000\000\071\000\
\071\000\071\000\071\000\071\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\080\000\000\000\069\000\085\000\
\085\000\090\000\000\000\000\000\000\000\000\000\067\000\069\000\
\069\000\069\000\069\000\069\000\085\000\085\000\085\000\085\000\
\085\000\000\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\000\000\000\000\000\000\086\000\086\000\000\000\
\000\000\000\000\000\000\000\000\012\000\077\000\077\000\077\000\
\077\000\077\000\086\000\086\000\086\000\086\000\086\000\000\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\000\000\000\000\000\000\087\000\087\000\013\000\000\000\000\000\
\000\000\000\000\000\000\078\000\078\000\078\000\078\000\078\000\
\087\000\087\000\087\000\087\000\087\000\000\000\074\000\074\000\
\000\000\000\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\000\000\000\000\
\000\000\088\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\000\074\000\074\000\074\000\074\000\088\000\088\000\
\088\000\088\000\088\000\000\000\000\000\000\000\000\000\000\000\
\075\000\075\000\000\000\000\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\075\000\075\000\075\000\075\000\
\000\000\000\000\000\000\000\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\000\000\000\000\000\000\089\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\082\000\082\000\082\000\082\000\
\089\000\089\000\089\000\089\000\089\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\083\000\083\000\083\000\
\083\000\000\000\000\000\000\000\000\000\081\000\081\000\000\000\
\000\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\081\000\081\000\081\000\
\081\000\000\000\000\000\000\000\000\000\080\000\000\000\000\000\
\000\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\000\000\000\000\000\000\090\000\090\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\080\000\080\000\080\000\
\080\000\090\000\090\000\090\000\090\000\090\000\067\000\067\000\
\067\000\067\000\067\000\112\000\000\000\000\000\000\000\112\000\
\000\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\112\000\000\000\012\000\112\000\
\112\000\000\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\112\000\000\000\000\000\112\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\112\000\064\000\000\000\013\000\
\112\000\065\000\000\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\000\000\064\000\
\000\000\000\000\155\000\065\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\083\000\
\000\000\000\000\065\000\084\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\000\000\000\000\082\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\083\000\065\000\
\100\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\082\000\000\000\000\000\000\000\000\000\
\000\000\064\000\000\000\083\000\105\000\065\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\000\000\
\000\000\082\000\000\000\000\000\064\000\000\000\000\000\000\000\
\065\000\083\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\000\000\082\000\000\000\000\000\064\000\
\000\000\000\000\000\000\065\000\083\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\000\000\000\000\000\000\082\000\
\000\000\000\000\064\000\000\000\000\000\000\000\065\000\083\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\064\000\000\000\000\000\000\000\065\000\000\000\066\000\067\000\
\068\000\069\000\082\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\083\000\000\000\000\000\064\000\000\000\000\000\
\082\000\065\000\000\000\066\000\067\000\068\000\069\000\000\000\
\083\000\072\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000"

let yycheck = "\056\000\
\000\000\008\000\009\000\010\000\011\000\000\000\007\001\014\000\
\015\000\001\000\011\001\007\001\007\001\137\000\006\001\022\000\
\011\001\108\000\027\000\008\001\029\000\027\000\012\001\005\000\
\006\000\007\000\035\001\036\001\128\000\129\000\031\001\000\000\
\041\001\042\001\158\000\000\000\048\001\029\000\039\001\046\000\
\002\001\000\000\099\000\039\001\039\001\001\000\008\001\002\001\
\055\000\006\000\007\000\151\000\034\000\043\001\000\000\040\001\
\006\001\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\166\000\083\000\034\000\087\000\035\001\
\036\001\087\000\173\000\050\001\141\000\041\001\051\001\144\000\
\037\001\096\000\000\000\098\000\041\001\089\001\090\001\091\001\
\092\001\047\001\000\000\091\001\089\001\090\001\091\001\092\001\
\089\001\090\001\091\001\092\001\100\000\035\001\036\001\089\001\
\090\001\012\001\040\001\041\001\045\001\174\000\001\001\002\001\
\003\001\004\001\005\001\039\001\007\001\007\001\002\001\010\001\
\011\001\011\001\045\001\014\001\001\001\015\001\016\001\000\000\
\012\000\013\000\000\000\089\001\090\001\091\001\149\000\091\001\
\041\001\038\001\035\001\036\001\155\000\031\001\033\001\034\001\
\041\001\012\001\037\001\007\001\039\001\039\001\042\001\011\001\
\043\001\013\001\014\001\015\001\016\001\048\001\040\001\040\001\
\051\001\052\001\053\001\001\001\002\001\003\001\004\001\005\001\
\000\000\007\001\008\001\031\001\010\001\011\001\044\001\046\001\
\014\001\045\001\043\001\039\001\089\001\090\001\091\001\092\001\
\001\001\002\001\003\001\004\001\005\001\040\001\007\001\050\001\
\040\001\010\001\011\001\033\001\034\001\014\001\043\001\037\001\
\040\001\039\001\093\001\094\001\040\001\029\000\000\000\041\001\
\043\001\100\000\048\001\021\000\165\000\092\000\052\001\053\001\
\033\001\034\001\137\000\010\000\037\001\155\000\039\001\013\000\
\055\000\255\255\255\255\144\000\255\255\255\255\255\255\048\001\
\255\255\255\255\255\255\052\001\053\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\094\001\255\255\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\094\001\000\000\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\000\000\039\001\
\040\001\041\001\042\001\043\001\044\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\052\001\053\001\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\027\001\028\001\
\010\001\011\001\035\001\036\001\014\001\028\001\000\000\255\255\
\041\001\042\001\255\255\040\001\041\001\042\001\043\001\044\001\
\255\255\040\001\041\001\042\001\043\001\044\001\255\255\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\094\001\041\001\
\042\001\043\001\000\000\255\255\255\255\255\255\048\001\000\000\
\050\001\007\001\052\001\053\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\255\255\031\001\040\001\041\001\042\001\043\001\044\001\000\000\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\007\001\255\255\093\001\094\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\255\255\031\001\035\001\036\001\000\000\255\255\255\255\255\255\
\041\001\039\001\040\001\041\001\042\001\043\001\044\001\007\001\
\255\255\255\255\255\255\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\000\000\255\255\031\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\007\001\255\255\255\255\
\255\255\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\000\000\255\255\031\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\007\001\255\255\255\255\255\255\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\000\000\255\255\031\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\000\000\255\255\031\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\000\000\255\255\031\001\255\255\255\255\
\000\000\035\001\036\001\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\000\000\255\255\031\001\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\040\001\
\041\001\042\001\043\001\044\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\000\000\255\255\031\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\000\000\255\255\031\001\027\001\
\028\001\000\000\255\255\255\255\255\255\255\255\000\000\040\001\
\041\001\042\001\043\001\044\001\040\001\041\001\042\001\043\001\
\044\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\255\255\255\255\255\255\000\000\040\001\041\001\042\001\
\043\001\044\001\040\001\041\001\042\001\043\001\044\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\027\001\028\001\000\000\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\040\001\041\001\042\001\043\001\044\001\255\255\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\040\001\041\001\042\001\043\001\044\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\040\001\041\001\042\001\043\001\044\001\040\001\041\001\
\042\001\043\001\044\001\007\001\255\255\255\255\255\255\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\039\001\007\001\255\255\042\001\043\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\007\001\255\255\042\001\
\043\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\255\255\007\001\
\255\255\255\255\044\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\007\001\039\001\
\255\255\255\255\011\001\043\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\007\001\255\255\255\255\039\001\011\001\
\041\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\007\001\255\255\039\001\040\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\031\001\255\255\255\255\007\001\255\255\255\255\255\255\
\011\001\039\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\031\001\255\255\255\255\007\001\
\255\255\255\255\255\255\011\001\039\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\255\255\007\001\255\255\255\255\255\255\011\001\039\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\007\001\255\255\255\255\255\255\011\001\255\255\013\001\014\001\
\015\001\016\001\031\001\018\001\019\001\020\001\255\255\255\255\
\255\255\255\255\039\001\255\255\255\255\007\001\255\255\255\255\
\031\001\011\001\255\255\013\001\014\001\015\001\016\001\255\255\
\039\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001"

let yynames_const = "\
  AND\000\
  MUT\000\
  NEG\000\
  NOT\000\
  ASTK\000\
  EQ\000\
  PLUS\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  LOR\000\
  LXOR\000\
  SLLI\000\
  SLRI\000\
  DEQ\000\
  NEQ\000\
  LT\000\
  LEQT\000\
  GT\000\
  GEQT\000\
  BWAND\000\
  BWOR\000\
  COMMENT\000\
  FORCEIDENT\000\
  AS\000\
  LBLSPEC\000\
  CONTINUE\000\
  BREAK\000\
  WHILE\000\
  LOOP\000\
  IF\000\
  ELSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  SCOLON\000\
  COMMA\000\
  OFTYPE\000\
  GIVES\000\
  DEC\000\
  NEWLINE\000\
  END\000\
  FN\000\
  TRUE\000\
  FALSE\000\
  ABSTRACT\000\
  ASYNC\000\
  AWAIT\000\
  BECOME\000\
  BOX\000\
  CONST\000\
  CRATE\000\
  DO\000\
  DYN\000\
  ENUM\000\
  EXTERN\000\
  FINAL\000\
  FOR\000\
  IMPL\000\
  IN\000\
  MACRO\000\
  MATCH\000\
  MOVE\000\
  OVERRIDE\000\
  PRIV\000\
  PUB\000\
  REF\000\
  SELF\000\
  SSELF\000\
  STATIC\000\
  SUPER\000\
  TRAIT\000\
  TYPE\000\
  TYPEOF\000\
  UNSAFE\000\
  UNSIZED\000\
  USE\000\
  VIRTUAL\000\
  WHERE\000\
  YIELD\000\
  LET\000\
  RETURN\000\
  "

let yynames_block = "\
  DCONST\000\
  VARNAME\000\
  BCONST\000\
  OCONST\000\
  HCONST\000\
  EXP\000\
  TAG\000\
  ISUF\000\
  USUF\000\
  FSUF\000\
  BSUF\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fseq) in
    Obj.repr(
# 54 "parser.mly"
            ( _1 )
# 779 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'f) in
    Obj.repr(
# 55 "parser.mly"
        ( _1 )
# 786 "parser.ml"
               : 'fseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'f) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fseq) in
    Obj.repr(
# 56 "parser.mly"
           ( Seq(_1, _2) )
# 794 "parser.ml"
               : 'fseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ps) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'vers) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 58 "parser.mly"
                                      ( Defun(Id(_2), _4, _6, _7) )
# 804 "parser.ml"
               : 'f))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                ( Empty )
# 810 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pf) in
    Obj.repr(
# 62 "parser.mly"
             ( _1 )
# 817 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pf) in
    Obj.repr(
# 63 "parser.mly"
       ( _1 )
# 824 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ps) in
    Obj.repr(
# 64 "parser.mly"
                ( Seq(_1, _3) )
# 832 "parser.ml"
               : 'ps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'p) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 66 "parser.mly"
               ( Oftype(_1, _3) )
# 840 "parser.ml"
               : 'pf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    Obj.repr(
# 68 "parser.mly"
                   ( _2 )
# 847 "parser.ml"
               : 'b))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
               ( Empty )
# 853 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 70 "parser.mly"
        ( _1 )
# 860 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ds) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 71 "parser.mly"
           ( Seq(_1, _2) )
# 868 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ds) in
    Obj.repr(
# 72 "parser.mly"
       ( _1 )
# 875 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 74 "parser.mly"
      ( _1 )
# 882 "parser.ml"
               : 'ds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ds) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 75 "parser.mly"
         ( Seq(_1, _2) )
# 890 "parser.ml"
               : 'ds))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Empty )
# 896 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    Obj.repr(
# 78 "parser.mly"
             ( _1 )
# 903 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'p) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lvers) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'eo) in
    Obj.repr(
# 79 "parser.mly"
                          ( Setf(_2, _3, _4) )
# 912 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'f) in
    Obj.repr(
# 80 "parser.mly"
      ( _1 )
# 919 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                   ( Empty )
# 925 "parser.ml"
               : 'lvers))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 83 "parser.mly"
             ( _2 )
# 932 "parser.ml"
               : 'lvers))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                ( Empty )
# 938 "parser.ml"
               : 'eo))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 86 "parser.mly"
         ( _2 )
# 945 "parser.ml"
               : 'eo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
           ( Id(_1) )
# 952 "parser.ml"
               : 'p))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                ( Mut(Id(_2)) )
# 959 "parser.ml"
               : 'p))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                  ( Empty )
# 965 "parser.ml"
               : 'vers))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 92 "parser.mly"
            ( _2 )
# 972 "parser.ml"
               : 'vers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'icte) in
    Obj.repr(
# 94 "parser.mly"
          ( _1 )
# 979 "parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fcte) in
    Obj.repr(
# 95 "parser.mly"
         ( _1 )
# 986 "parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bcte) in
    Obj.repr(
# 96 "parser.mly"
         ( _1 )
# 993 "parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
             ( _1 )
# 1000 "parser.ml"
               : 'intg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'intg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'someintsuf) in
    Obj.repr(
# 99 "parser.mly"
                      ( ICte(_1) )
# 1008 "parser.ml"
               : 'icte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'someintsuf) in
    Obj.repr(
# 100 "parser.mly"
                      ( ICte(_1) )
# 1016 "parser.ml"
               : 'icte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'someintsuf) in
    Obj.repr(
# 101 "parser.mly"
                      ( ICte(_1) )
# 1024 "parser.ml"
               : 'icte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'someintsuf) in
    Obj.repr(
# 102 "parser.mly"
                      ( ICte(_1) )
# 1032 "parser.ml"
               : 'icte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'intg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                ( FCte(_1) )
# 1040 "parser.ml"
               : 'fcte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'intg) in
    Obj.repr(
# 105 "parser.mly"
             ( FCte(_1 ^ ".") )
# 1047 "parser.ml"
               : 'fcte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'intg) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'intg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'somef) in
    Obj.repr(
# 106 "parser.mly"
                        ( FCte(_1 ^ "." ^ _3) )
# 1056 "parser.ml"
               : 'fcte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'intg) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pow) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'somef) in
    Obj.repr(
# 107 "parser.mly"
                   ( FCte(_1 ^ _2) )
# 1065 "parser.ml"
               : 'fcte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'intg) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'intg) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pow) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'somef) in
    Obj.repr(
# 108 "parser.mly"
                            ( FCte(_1 ^ "." ^ _3 ^ _4) )
# 1075 "parser.ml"
               : 'fcte))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                   ()
# 1081 "parser.ml"
               : 'somef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
         ()
# 1088 "parser.ml"
               : 'somef))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                        ()
# 1094 "parser.ml"
               : 'someintsuf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'intsuf) in
    Obj.repr(
# 115 "parser.mly"
           ()
# 1101 "parser.ml"
               : 'someintsuf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
         ( _1 )
# 1108 "parser.ml"
               : 'pow))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
           ( BCte("true") )
# 1114 "parser.ml"
               : 'bcte))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
          ( BCte("false") )
# 1120 "parser.ml"
               : 'bcte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
             ( Type(_1) )
# 1127 "parser.ml"
               : 'intsuf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 123 "parser.mly"
         ( Type(_1) )
# 1134 "parser.ml"
               : 'intsuf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'intsuf) in
    Obj.repr(
# 125 "parser.mly"
             ( _1 )
# 1141 "parser.ml"
               : 'tsuf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
         ( Type(_1) )
# 1148 "parser.ml"
               : 'tsuf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parser.mly"
         ( Type(_1) )
# 1155 "parser.ml"
               : 'tsuf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tsuf) in
    Obj.repr(
# 129 "parser.mly"
                      ( _2 )
# 1162 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tsuf) in
    Obj.repr(
# 130 "parser.mly"
         ( _1 )
# 1169 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tsuf) in
    Obj.repr(
# 131 "parser.mly"
             ( _2 )
# 1176 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tsuf) in
    Obj.repr(
# 132 "parser.mly"
                 ( _3 )
# 1183 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                  ( Type("unit") )
# 1189 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "parser.mly"
           ( Id(_1) )
# 1196 "parser.ml"
               : 'x))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'x) in
    Obj.repr(
# 137 "parser.mly"
           ( Deref(_2) )
# 1203 "parser.ml"
               : 'x))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                 ( [] )
# 1209 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    Obj.repr(
# 140 "parser.mly"
            ( [_1] )
# 1216 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 141 "parser.mly"
      ( [_1] )
# 1223 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 142 "parser.mly"
                ( _1::_3 )
# 1231 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cte) in
    Obj.repr(
# 144 "parser.mly"
         ( _1 )
# 1238 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 145 "parser.mly"
            ( Id(_1) )
# 1245 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'x) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 147 "parser.mly"
           ( Aff(_1, _3) )
# 1253 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arg) in
    Obj.repr(
# 148 "parser.mly"
                        ( Call(_1, _3) )
# 1261 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 150 "parser.mly"
              ( Mut(_3) )
# 1268 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 151 "parser.mly"
          ( Ref(_2) )
# 1275 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 152 "parser.mly"
                      ( Neg(_2) )
# 1282 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 153 "parser.mly"
          ( Not(_2) )
# 1289 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 154 "parser.mly"
           ( Deref(_2) )
# 1296 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 156 "parser.mly"
             ( Add(_1, _3) )
# 1304 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 157 "parser.mly"
              ( Sub(_1, _3) )
# 1312 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 158 "parser.mly"
             ( Mul(_1, _3) )
# 1320 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 159 "parser.mly"
            ( Div(_1, _3) )
# 1328 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 160 "parser.mly"
            ( Mod(_1, _3) )
# 1336 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 161 "parser.mly"
            ( Land(_1, _3) )
# 1344 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 162 "parser.mly"
            ( Lor(_1, _3) )
# 1352 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 163 "parser.mly"
             ( Lxor(_1, _3) )
# 1360 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 164 "parser.mly"
             ( Slli(_1, _3) )
# 1368 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 165 "parser.mly"
             ( Slri(_1, _3) )
# 1376 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 166 "parser.mly"
            ( Eq(_1, _3) )
# 1384 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 167 "parser.mly"
            ( Neq(_1, _3) )
# 1392 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 168 "parser.mly"
           ( Lt(_1, _3) )
# 1400 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 169 "parser.mly"
             ( Leqt(_1, _3) )
# 1408 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 170 "parser.mly"
           ( Gt(_1, _3) )
# 1416 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 171 "parser.mly"
             ( Geqt(_1, _3) )
# 1424 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 172 "parser.mly"
              ( Bwand(_1, _3) )
# 1432 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 173 "parser.mly"
             ( Bwor(_1, _3) )
# 1440 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    Obj.repr(
# 175 "parser.mly"
                    ( Paren(_2) )
# 1447 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 't) in
    Obj.repr(
# 177 "parser.mly"
           ( Cast(_1, _3) )
# 1455 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lo) in
    Obj.repr(
# 179 "parser.mly"
                ( Continue(_2) )
# 1462 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lo) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'eosb) in
    Obj.repr(
# 180 "parser.mly"
                  ( Break(_2, _3) )
# 1470 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'eosb) in
    Obj.repr(
# 181 "parser.mly"
                ( Return(_2) )
# 1477 "parser.ml"
               : 'esb))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
                 ( Empty )
# 1483 "parser.ml"
               : 'eosb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.ast) in
    Obj.repr(
# 184 "parser.mly"
      ( _1 )
# 1490 "parser.ml"
               : 'eosb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 186 "parser.mly"
         ( Tag(_1) )
# 1497 "parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
                ( Empty )
# 1503 "parser.ml"
               : 'lo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 189 "parser.mly"
        ( _1 )
# 1510 "parser.ml"
               : 'lo))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
                 ( Empty )
# 1516 "parser.ml"
               : 'lob))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tag) in
    Obj.repr(
# 192 "parser.mly"
               ( _1 )
# 1523 "parser.ml"
               : 'lob))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lob) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 194 "parser.mly"
          ( Lblk(_1, _2) )
# 1531 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lob) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 195 "parser.mly"
               ( Loop(_1, _3) )
# 1539 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lob) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 196 "parser.mly"
                  ( While(_1, _3, _4) )
# 1548 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifs) in
    Obj.repr(
# 197 "parser.mly"
        ( _1 )
# 1555 "parser.ml"
               : 'eb))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 199 "parser.mly"
            ( If(_2, _3) )
# 1563 "parser.ml"
               : 'ifs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.ast) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'b) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bif) in
    Obj.repr(
# 200 "parser.mly"
                    ( Ifelse(_2, _3, _5) )
# 1572 "parser.ml"
               : 'ifs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'b) in
    Obj.repr(
# 202 "parser.mly"
       ( _1 )
# 1579 "parser.ml"
               : 'bif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifs) in
    Obj.repr(
# 203 "parser.mly"
        ( _1 )
# 1586 "parser.ml"
               : 'bif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'esb) in
    Obj.repr(
# 205 "parser.mly"
       ( _1 )
# 1593 "parser.ml"
               : Ast.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eb) in
    Obj.repr(
# 206 "parser.mly"
       ( _1 )
# 1600 "parser.ml"
               : Ast.ast))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.ast)
